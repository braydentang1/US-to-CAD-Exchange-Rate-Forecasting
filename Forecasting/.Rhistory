?forecast::thetaf
library(tidyverse)
library(forecast)
#Will rename once we settle on some sort of methodology
#......................Import Data..........................................#
data = read_csv("C:/Users/Brayden/Documents/GitHub/US-to-CAD-Exchange-Rate-Forecasting/Data/EXCAUS.csv")
data.ts = ts(data$EXCAUS, frequency = 12, start = c(1971,1), end = c(2019,4))
#......................Plot the Time Series.................................#
autoplot(data.ts, ts.colour = "black", ts.size = 1) + labs(title = "US/CAD Exchange Rate Over Time", subtitle = "Over The Period of January 1971 to April 2019", y = "$1 USD in CAD", x = "Time")
autoplot(diff(data.ts), ts.colour = "black", ts.size = 1) +labs(title = "US/CAD Exchange Rate Over Time; 1st Order Differenced Series", subtitle = "Over The Period of January 1971 to April 2019", y = "$1 USD in CAD; Difference", x = "Time")
#......................Monthly Predictions.............................#
#Function that finds monthly RMSE one step ahead in time, with restimation of the model
data = data.ts
test = window(data, start = 2018 + 4/12)
error.ETS = vector("numeric", length(test))
error.Arima = vector("numeric", length(test))
error.theta = vector("numeric", length(test))
i = 1
#Theta
forecast.theta = thetaf(y = train, h = 1)$mean
train = window(data, end = 2018 + (2+i)/12)
forecast.theta = thetaf(y = train, h = 1)$mean
forecast.thetra
forecast.theta
#Theta
forecast.theta = thetaf(y = train, h = 1)$mean
error.theta[i] = (forecast.theta - test[i])^2
source('~/GitHub/US-to-CAD-Exchange-Rate-Forecasting/Forecasting/Initial Exploration.R', echo=TRUE)
source('~/GitHub/US-to-CAD-Exchange-Rate-Forecasting/Forecasting/Initial Exploration.R', echo=TRUE)
results = evaluate.Models(data = data.ts)
View(results)
?naive
source('~/GitHub/US-to-CAD-Exchange-Rate-Forecasting/Forecasting/Initial Exploration.R', echo=TRUE)
exclude = c("ETS")
names(exclude)
"ETS" %in% exclude
!"ETS" %in% exclude
library(tidyverse)
library(forecast)
#Will rename once we settle on some sort of methodology
#......................Import Data..........................................#
data = read_csv("C:/Users/Brayden/Documents/GitHub/US-to-CAD-Exchange-Rate-Forecasting/Data/EXCAUS.csv")
data.ts = ts(data$EXCAUS, frequency = 12, start = c(1971,1), end = c(2019,4))
#......................Plot the Time Series.................................#
autoplot(data.ts, ts.colour = "black", ts.size = 1) + labs(title = "US/CAD Exchange Rate Over Time", subtitle = "Over The Period of January 1971 to April 2019", y = "$1 USD in CAD", x = "Time")
autoplot(diff(data.ts), ts.colour = "black", ts.size = 1) +labs(title = "US/CAD Exchange Rate Over Time; 1st Order Differenced Series", subtitle = "Over The Period of January 1971 to April 2019", y = "$1 USD in CAD; Difference", x = "Time")
#......................Monthly Predictions.............................#
#Function that finds monthly RMSE one step ahead in time, with restimation of the model
#Exclude is a character vector that will exclude the fitted models in the vector. Example: c("ETS", "Arima") excludes ETS and Arima from the results.
evaluate.Models = function(data, exclude = NULL){
test = window(data, start = 2018 + 4/12)
error.ETS = vector("numeric", length(test))
error.Arima = vector("numeric", length(test))
error.theta = vector("numeric", length(test))
error.rwd = vector("numeric", length(test))
for(i in 1:length(test)){
train = window(data, end = 2018 + (2+i)/12)
#ETS
if(!"ETS" %in% exclude){
ets.model = ets(train, ic = "aicc")
forecast.ets = forecast(ets.model, h = 1)$mean
error.ETS[i] = (forecast.ets - test[i])^2
}
#Auto.Arima
if(!"Arima" %in% exclude){
arima.model = auto.arima(train, stepwise = TRUE, ic = "aicc", stationary = TRUE)
forecast.arima = forecast(arima.model, h = 1)$mean
error.Arima[i] = (forecast.arima - test[i])^2
}
#Theta
if(!"Theta" %in% exclude){
forecast.theta = thetaf(y = train, h = 1)$mean
error.theta[i] = (forecast.theta - test[i])^2
}
#Naive = Random Walk
if(!"RWD" %in% exclude){
forecast.rwd = rwf(y = train, h = 1, drift = TRUE)
error.rwd[i] = (forecast.rwd - test[i])^2
}
}
list(ETS = mean(error.ETS, na.rm = TRUE)^0.5, Auto.Arima = mean(error.Arima, na.rm = TRUE)^0.5,
Theta = mean(error.theta, na.rm = TRUE)^0.5, RWD = mean(error.rwd, na.rm = TRUE)^0.5)
}
results = evaluate.Models(data = data.ts, exclude = c("ETS", "Arima"))
source('~/GitHub/US-to-CAD-Exchange-Rate-Forecasting/Forecasting/Initial Exploration.R', echo=TRUE)
source('~/GitHub/US-to-CAD-Exchange-Rate-Forecasting/Forecasting/Initial Exploration.R', echo=TRUE)
data = data.ts
i = 1
test = window(data, start = 2018 + 4/12)
error.ETS = vector("numeric", length(test))
error.Arima = vector("numeric", length(test))
error.theta = vector("numeric", length(test))
error.rwd = vector("numeric", length(test))
train = window(data, end = 2018 + (2+i)/12)
forecast.rwd = rwf(y = train, h = 1, drift = TRUE)$mean
error.rwd[i] = (forecast.rwd - test[i])^2
i = 2
train = window(data, end = 2018 + (2+i)/12)
forecast.rwd = rwf(y = train, h = 1, drift = TRUE)$mean
error.rwd[i] = (forecast.rwd - test[i])^2
train = window(data, end = 2018 + (2+i)/12)
train
test
test[2]
forecast.rwd = rwf(y = train, h = 1, drift = TRUE)$mean
forecast.rwd = rwf(y = train, h = 1, drift = TRUE)
View(forecast.rwd)
forecast.rwd[["series"]]
forecast.rwd[["x"]]
View(forecast.rwd)
View(forecast.rwd)
forecast.rwd[["fitted"]]
i = 1
train = window(data, end = 2018 + (2+i)/12)
forecast.rwd = rwf(y = train, h = 1, drift = TRUE)
View(forecast.rwd)
forecast.rwd = rwf(y = train, h = 1, drift = TRUE)$mean
forecast.rwd
i = 2
forecast.rwd = rwf(y = train, h = 1, drift = TRUE)$mean
train = window(data, end = 2018 + (2+i)/12)
forecast.rwd = rwf(y = train, h = 1, drift = TRUE)$mean
forecast.rwd
i = 3
train = window(data, end = 2018 + (2+i)/12)
forecast.rwd = rwf(y = train, h = 1, drift = TRUE)$mean
forecast.rwd
train
source('~/GitHub/US-to-CAD-Exchange-Rate-Forecasting/Forecasting/Initial Exploration.R', echo=TRUE)
View(results)
source('~/GitHub/US-to-CAD-Exchange-Rate-Forecasting/Forecasting/Initial Exploration.R', echo=TRUE)
View(results)
results[["RWD"]]
View(results)
i = 1
data.ts = data
test = window(data, start = 2018 + 4/12)
error.ETS = vector("numeric", length(test))
error.Arima = vector("numeric", length(test))
error.theta = vector("numeric", length(test))
error.rwd = vector("numeric", length(test))
model.Ensemble = vector("list", length(test))
library(tidyverse)
library(forecast)
#Will rename once we settle on some sort of methodology
#......................Import Data..........................................#
data = read_csv("C:/Users/Brayden/Documents/GitHub/US-to-CAD-Exchange-Rate-Forecasting/Data/EXCAUS.csv")
data.ts = ts(data$EXCAUS, frequency = 12, start = c(1971,1), end = c(2019,4))
#......................Plot the Time Series.................................#
autoplot(data.ts, ts.colour = "black", ts.size = 1) + labs(title = "US/CAD Exchange Rate Over Time", subtitle = "Over The Period of January 1971 to April 2019", y = "$1 USD in CAD", x = "Time")
autoplot(diff(data.ts), ts.colour = "black", ts.size = 1) +labs(title = "US/CAD Exchange Rate Over Time; 1st Order Differenced Series", subtitle = "Over The Period of January 1971 to April 2019", y = "$1 USD in CAD; Difference", x = "Time")
#......................Monthly Predictions.............................#
#Function that finds monthly RMSE one step ahead in time, with restimation of the model
#Exclude is a character vector that will exclude the fitted models in the vector. Example: c("ETS", "Arima") excludes ETS and Arima from the results.
data = data.ts
test = window(data, start = 2018 + 4/12)
error.ETS = vector("numeric", length(test))
error.Arima = vector("numeric", length(test))
error.theta = vector("numeric", length(test))
error.rwd = vector("numeric", length(test))
model.Ensemble = vector("list", length(test))
model.Average = vector("numeric", 3)
train = window(data, end = 2018 + (2+i)/12)
exclude = "Arima"
for(i in 1:length(test)){
model.Average = vector("numeric", 3)
train = window(data, end = 2018 + (2+i)/12)
#ETS
if(!"ETS" %in% exclude){
ets.model = ets(train, ic = "aicc")
forecast.ets = forecast(ets.model, h = 1)$mean
model.Average[1] = forecast.ets
error.ETS[i] = (forecast.ets - test[i])^2
}
#Auto.Arima
if(!"Arima" %in% exclude){
arima.model = auto.arima(train, stepwise = TRUE, ic = "aicc", stationary = TRUE)
forecast.arima = forecast(arima.model, h = 1)$mean
error.Arima[i] = (forecast.arima - test[i])^2
}
#Theta
if(!"Theta" %in% exclude){
forecast.theta = thetaf(y = train, h = 1)$mean
model.Average[2] = forecast.theta
error.theta[i] = (forecast.theta - test[i])^2
}
#Naive = Random Walk
if(!"RWD" %in% exclude){
forecast.rwd = rwf(y = train, h = 1, drift = TRUE)$mean
model.Average[3] = forecast.rwd
error.rwd[i] = (forecast.rwd - test[i])^2
}
model.Ensemble[[i]] = model.Average
}
View(model.Ensemble)
Ensemble.Process = lapply(model.Ensemble, mean)
View(Ensemble.Process)
Ensemble.Process = unlist(lapply(model.Ensemble, mean))
list(ETS = mean(error.ETS, na.rm = TRUE)^0.5, Auto.Arima = mean(error.Arima, na.rm = TRUE)^0.5,
Theta = mean(error.theta, na.rm = TRUE)^0.5, RWD = mean(error.rwd, na.rm = TRUE)^0.5,
Ensemble = (mean((Ensemble.Process - test)^2))^0.5)
source('~/GitHub/US-to-CAD-Exchange-Rate-Forecasting/Forecasting/Initial Exploration.R', echo=TRUE)
View(results)
results[["Ensemble"]]
View(results)
source('~/GitHub/US-to-CAD-Exchange-Rate-Forecasting/Forecasting/Initial Exploration.R', echo=TRUE)
View(results)
results[["Ensemble"]]
test = window(data, start = 2018 + 1/12)
data = data.ts
test = window(data, start = 2018 + 1/12)
test
i = 1
model.Average = vector("numeric", 3)
train = window(data, end = 2017 + (10+i)/12)
train
test = window(data, start = 2018)
test
source('~/GitHub/US-to-CAD-Exchange-Rate-Forecasting/Forecasting/Initial Exploration.R', echo=TRUE)
View(results)
window(data.ts, start = 2018)
length(window(data.ts, start = 2018))
source('~/GitHub/US-to-CAD-Exchange-Rate-Forecasting/Forecasting/Initial Exploration.R', echo=TRUE)
View(results)
View(results)
